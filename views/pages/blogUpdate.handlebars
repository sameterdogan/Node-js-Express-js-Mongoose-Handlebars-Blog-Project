<div class="container">


    {{> _flash}}
    {{> _validation}}
    <div id="message">

    </div>

    <form id="updateBlogFrom" class="my-5">
        <div class="form-group">
            <label for="blogTitle">Başlık</label>
            <input type="text" class="form-control" value="{{blog.blogTitle}}" name="blogTitle" id="title"
                   placeholder="Başlık" required minlength="5">
            <small class="form-text text-muted">Başlık alanı en az 5 karakterden oluşmalıdır</small>
        </div>

        <div class="form-group">
            <label for="blogSummary">Özet</label>
            <input type="text" class="form-control " value="{{blog.blogSummary}}" name="blogSummary" id="summary"
                   placeholder="Özet" required minlength="20">
            <small class="form-text text-muted ">Özet alanı en az 20 karakterden oluşmalıdır.</small>
        </div>
        <div class="form-group">
            <img id="image" src="/assets/image/blogImage/{{blog.blogImage}}" class="img-fluid yükseklik"
                 alt="fotoğraf  görüntülenemiyor">
            <input type="file" class="form-control-file my-2" name="blogImage" id="blogImage"
                   accept="image/jpeg,image/jpg,image/png,image/gif" aria-describedby="inputGroupFileAddon04">
        </div>
        <div class="form-group">
            <label for="blogContent">İçerik</label>
            <textarea name="blogContent" class="from-control" style="visibility: hidden" id="editor" cols="60" rows="30"
                      minlength="100"></textarea>
            <small class="form-text text-muted">İçerik alanı en az 100 karakterden oluşmalıdır.</small>
        </div>
        <div class="form-group">
            <label for="category">Kategori</label>
            <select class="form-control" name="category" id="category">

            </select>
        </div>
        <button type="submit" id="updateBlog" class="btn btn-sm btn-warning">Güncelle</button>

    </form>

</div>

<script src="/assets/vendor/ckeditor5/build/ckeditor.js"></script>

<script>
    $(document).ready(function() {
        let editor
        ClassicEditor
            .create(document.querySelector('#editor'), config = {
                toolbar: {
                    items: [
                        'heading',
                        '|',
                        'bold',
                        'italic',
                        'link',
                        'bulletedList',
                        'numberedList',
                        '|',
                        'indent',
                        'outdent',
                        '|',
                        'imageUpload',
                        'code',
                        'codeBlock',
                        'blockQuote',
                        'insertTable',
                        'mediaEmbed',
                        'undo',
                        'redo',
                    ],
                },
                language: 'tr',
                image: {
                    toolbar: [
                        'imageTextAlternative',
                        'imageStyle:full',
                        'imageStyle:side',
                    ],
                },
                ckfinder: {
                    uploadUrl: '/api/blogs/blogContentImageUpload',
                },
            })
            .then(newEditor => {

                editor = newEditor

                editor.setData(`{{{blog.blogContent}}}`)
            })
            .catch(error => {
                console.error(error)
            })

        function errorHandling(err) {
            console.log(err.status)
            switch (err.status) {
                case 400:
                    showMessage(err.responseJSON.error, 'danger')
                    break
                case 401:
                    window.location = '/auth/login'
                    break
                case 403:
                    showMessage(err.responseJSON.error, 'danger')
                    break
                case 404:
                    window.local = '*'
                    break
                case 500:
                    window.location = '/500'


            }
        }

        function showMessage(message, color) {
            $('#message').append(
                `
                          <div class='alert alert-${color} alert-dismissible fade show my-3' role='alert'>
                                ${message}
                                <button type='button' class='close' data-dismiss='alert' aria-label='Close'>
                                    <span aria-hidden='true'>&times;</span>
                                </button>
                           </div>
                        `)
            $('html, body').animate({ scrollTop: 0 }, 'slow')

        }

        function getCategories() {
            $.ajax({
                url: '/api/categories',
                type: 'GET',
                success: function(res) {
                    $(res.data.categories).each((index, category) => {
                        $('#category').append(`<option value='${category._id}'>${category.category}</option>`)
                    })
                    $('#category').val(`{{{blog.category}}}`)
                },
                error: function(err) {
                    errorHandling(err)
                },
            })
        }

        function updateblogValidation(formData) {
            let errors = ''
            if (formData.get('blogTitle').length < 5)
                errors += 'Başlık alanı  en az 5 <br>'
            if (formData.get('blogSummary').length < 20)
                errors += 'Özet alanı 20 karakterden fazla  olmak zorundadır. <br>'
            if (formData.get('blogContent').length < 100)
                errors += 'İçerik alanı en az 100 karakter olmak zorundadır. <br>'
            $('#message').html('')
            return errors

        }

        function updateBlog() {
            $(document).on('submit', '#updateBlogFrom', function(event) {
                event.preventDefault()
                let formData = new FormData(this)
                const errors = updateblogValidation(formData)

                if (errors == 0) {
                    $.ajax({
                        url: `/api/blogs/{{{blog._id}}}`,
                        type: 'PUT',
                        data: formData,
                        dataType: 'json',
                        contentType: false,
                        cache: false,
                        processData: false,
                        success: function(res) {
                            showMessage(res.message, 'success')
                            setTimeout(function() {
                                window.location = res.toUrl //yazılarım sayfasına yönlendirme
                            }, 3000)

                        },
                        error: function(err) {
                            errorHandling(err)
                        },
                    })
                } else {
                    showMessage(errors, 'danger')
                }

            })
        }

        //resim uzantısı kontrol etme
        $('input[type=\'file\']').change(function(e) {

            let extension = this.value.substr(this.value.lastIndexOf('.') + 1)
            let selectedFileName = this.value.substr(this.value.lastIndexOf('\\') + 1)
            if (!(extension == 'jpeg' || extension == 'jpg' || extension == 'png' || extension == 'PNG' || extension == 'jfif' || extension == 'gif')) {
                showMessage('Resim uzantısı jpg,png,gif veya jpeg olmalıdır..', 'danger')
            } else {
                const input = document.getElementById('blogImage')
                const fReader = new FileReader()
                fReader.readAsDataURL(input.files[0])
                fReader.onloadend = function(event) {
                    const img = $('#image')
                    $(img).attr('src', event.target.result)
                }
            }
        })


        getCategories()
        updateBlog()

    })


</script>
